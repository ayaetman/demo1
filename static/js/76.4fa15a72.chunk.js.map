{"version":3,"file":"static/js/76.4fa15a72.chunk.js","mappings":"oMAIA,MAAMA,EAAUC,+CACVC,EAAQ,UAAMF,EAAN,SACRG,EAAa,UAAMH,EAAN,gB,aCCnB,MAAMI,GAAsBC,EAAAA,EAAAA,eAAwCC,EAAAA,IAE9DC,EAA2B,IAAiB,IAAhB,SAACC,GAAc,EAC/C,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAqBL,EAAAA,GAAoBG,OAOnE,OACE,SAACL,EAAoBQ,SAArB,CAA8BC,MAAO,CAACJ,QAAOK,YAN1BC,IACnB,MAAMC,EAAe,IAAIP,KAAUM,GACnCL,EAASM,EAAT,GAIA,SACGR,GAFL,EAOIS,EAAkB,KAAMC,EAAAA,EAAAA,YAAWd,GCTnCe,GAAuBC,EAAAA,EAAAA,IAA4BC,EAAAA,IACnDC,EAA4B,IAAiB,IAAhB,SAACd,GAAc,EAChD,MAAM,MAACC,GAASQ,KACTM,EAAOC,IAAYb,EAAAA,EAAAA,WAAiBc,EAAAA,EAAAA,IAAsBhB,IAC3DiB,GAAeC,EAAAA,EAAAA,UAAQ,KAAMF,EAAAA,EAAAA,IAAsBhB,IAAQ,CAACA,KAElEmB,EAAAA,EAAAA,YAAU,KACJL,IAAUG,GACZF,EAASE,EACV,GACA,CAACA,IAEJ,MAAM,WACJG,EADI,QAEJC,EACAC,KAAMC,IACJC,EAAAA,EAAAA,UAAS,GAAD,OACPC,EAAAA,GAAQC,WADD,YACeZ,IACzB,IFzBcA,IACTa,IAAAA,IAAA,UACGjC,EADH,YACoBoB,IACxBc,MAAMC,GAAyCA,EAAEP,OEuBzCQ,CAAShB,IAElB,CAACiB,UAAW,EAAGC,kBAAkB,EAAMC,sBAAsB,IAG/D,OACE,SAACvB,EAAqBP,SAAtB,CAA+BC,MAAO,CAAC8B,UAAWd,EAAYC,UAASE,WAAUT,SAAjF,SACGf,GAFL,EAOIoC,EAAmB,KAAM1B,EAAAA,EAAAA,YAAWC,GAEpC0B,EAAuB,KAC3B,MAAM,SAACb,GAAYY,IACnB,OAAKZ,IAIU,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUD,OAHR,EAGT,EAiBIe,EAA0B,KAC9B,MAAM,UAACH,GAAaC,IACpB,OAAOD,CAAP,EC7DII,GAAkB1C,EAAAA,EAAAA,eAAoC2C,EAAAA,IAEtDC,EAAuB,IAAiB,IAAhB,SAACzC,GAAc,EAC3C,MAAO0C,EAAUC,IAAexC,EAAAA,EAAAA,UAAoBqC,EAAAA,GAAgBE,WAC7DE,EAAiBC,IAAsB1C,EAAAA,EAAAA,UAAaqC,EAAAA,GAAgBI,kBACrE,UAACT,GAAaC,IACdb,EAAOc,IACPS,GAAW3B,EAAAA,EAAAA,UAAQ,KAAM4B,EAAAA,EAAAA,IAA6BZ,EAAWZ,IAAO,CAACY,EAAWZ,IACpFyB,GAAgB7B,EAAAA,EAAAA,UAAQ,KAAM8B,EAAAA,EAAAA,IAA2B1B,EAAMmB,IAAW,CAACnB,EAAMmB,IAEvF,OACE,SAACH,EAAgBnC,SAAjB,CACEC,MAAO,CACLqC,WACAE,kBACAC,qBACAC,WACAE,gBACAE,SAAWC,KACTC,EAAAA,EAAAA,IAAiBD,EAAIT,EAAUC,EAA/B,EAEFU,YAAa,MACXC,EAAAA,EAAAA,IAAoBN,EAAeL,EAAapB,EAAhD,EAEFgC,cAAe,KACbZ,EAAY,GAAZ,GAdN,SAkBG3C,GAnBL,EAwBIwD,EAAc,KAAM9C,EAAAA,EAAAA,YAAW6B,G,wBCvCrC,MAAMkB,EAAkB,KACtB,MAAM,YAACnD,GAAeG,KAChB,UAAC0B,GAAaC,KACbsB,EAAMC,IAAWxD,EAAAA,EAAAA,aACjByD,EAAWC,IAAgB1D,EAAAA,EAAAA,aAElCiB,EAAAA,EAAAA,YAAU,KACR0C,EAAAA,GAAcC,kBAAd,GACC,IAaH,OACE,iCAEA,oBACEjB,SAAUX,EACV6B,KAAK,SACLC,UAAU,6BACV,uBAAqB,QACrB,yBAAuB,aALzB,WAOE,SAAC,KAAD,CAAOC,KAAK,0CAA0CD,UAAU,gBAC/DE,EAAAA,EAAAA,GAAE,cAIL,iBAAKF,UAAU,qDAAqD,eAAa,OAAjF,WAEE,gBAAKA,UAAU,YAAf,UACE,gBAAKA,UAAU,2BAAf,UAA2CE,EAAAA,EAAAA,GAAE,uBAK/C,gBAAKF,UAAU,+BAIf,iBAAKA,UAAU,YAAY,4BAA0B,OAArD,WAEE,iBAAKA,UAAU,QAAf,WACE,mBAAOA,UAAU,0BAAjB,WAA4CE,EAAAA,EAAAA,GAAE,QAAQ,QACtD,oBACEF,UAAU,0CACV,kBAAgB,OAChB,oBAAkBE,EAAAA,EAAAA,GAAE,iBACpB,mBAAiB,OACjB,4BAA0B,OAC1B,mBAAiB,OACjBC,SAAWC,GAAMV,EAAQU,EAAEC,OAAOjE,OAClCA,MAAOqD,EART,WAUE,mBAAQrD,MAAM,MACd,mBAAQA,MAAM,gBAAd,UAA+B8D,EAAAA,EAAAA,GAAE,oBACjC,mBAAQ9D,MAAM,UAAd,UAAyB8D,EAAAA,EAAAA,GAAE,cAC3B,mBAAQ9D,MAAM,YAAd,UAA2B8D,EAAAA,EAAAA,GAAE,gBAC7B,mBAAQ9D,MAAM,UAAd,UAAyB8D,EAAAA,EAAAA,GAAE,cAC3B,mBAAQ9D,MAAM,QAAd,UAAuB8D,EAAAA,EAAAA,GAAE,kBAM7B,iBAAKF,UAAU,QAAf,WACE,mBAAOA,UAAU,0BAAjB,WAA4CE,EAAAA,EAAAA,GAAE,cAAc,QAC5D,oBACEF,UAAU,0CACV,kBAAgB,OAChB,oBAAkBE,EAAAA,EAAAA,GAAE,iBACpB,mBAAiB,OACjB,4BAA0B,WAC1B,mBAAiB,OACjBC,SAAWC,GAAMR,EAAaQ,EAAEC,OAAOjE,OACvCA,MAAOuD,EART,WAUE,mBAAQvD,MAAM,MACd,mBAAQA,MAAM,YAAd,UAA2B8D,EAAAA,EAAAA,GAAE,gBAC7B,mBAAQ9D,MAAM,cAAd,UAA6B8D,EAAAA,EAAAA,GAAE,kBAC/B,mBAAQ9D,MAAM,cAAd,UAA6B8D,EAAAA,EAAAA,GAAE,kBAC/B,mBAAQ9D,MAAM,aAAd,UAA4B8D,EAAAA,EAAAA,GAAE,uBAMlC,iBAAKF,UAAU,6BAAf,WACE,mBACED,KAAK,SACLlB,SAAUX,EACVoC,QArFS,KACjBjE,EAAY,CACVkE,OAAQ,CAACd,OAAMe,WAAYb,MACxBc,EAAAA,IAFL,EAqFQT,UAAU,2DACV,uBAAqB,OACrB,4BAA0B,QAN5B,UAQGE,EAAAA,EAAAA,GAAE,YAEL,mBACErB,SAAUX,EACV6B,KAAK,SACLO,QAnGQ,KAChBjE,EAAY,CAACkE,YAAQG,KAAcD,EAAAA,IAAnC,EAmGQT,UAAU,+BACV,uBAAqB,OACrB,4BAA0B,SAN5B,UAQGE,EAAAA,EAAAA,GAAE,sBA7Fb,ECvBIS,EAAmB,KACvB,MAAM,mBAAC/B,GAAsBW,IAK7B,OACE,iBAAKS,UAAU,6BAA6B,6BAA2B,OAAvE,WACE,SAACR,EAAD,KAGA,oBAAQO,KAAK,SAASC,UAAU,6BAAhC,WACE,SAAC,KAAD,CAAOC,KAAK,yCAAyCD,UAAU,gBAC9DE,EAAAA,EAAAA,GAAE,cAKL,oBAAQH,KAAK,SAASC,UAAU,kBAAkBM,QAhB7B,KACvB1B,EAAmB,KAAnB,EAeE,WACE,SAAC,KAAD,CAAOqB,KAAK,yCAAyCD,UAAU,gBAC9DE,EAAAA,EAAAA,GAAE,iBAdT,ECJIU,EAAoB,KACxB,MAAM,SAACnC,EAAD,cAAWa,GAAiBC,IAC5BsB,GAAcC,EAAAA,EAAAA,mBACd,MAAChE,GAASqB,IAEV4C,GAAsBC,EAAAA,EAAAA,cAAY,IN2BbC,KAC3B,MAAMC,EAAWD,EAAQE,KAAKjC,GAAOvB,IAAAA,OAAA,UAAgBlC,EAAhB,YAA4ByD,MACjE,OAAOvB,IAAAA,IAAUuD,GAAUtD,MAAK,QAAhC,EM7B8CwD,CAAoB3C,IAAW,CAE3E4C,UAAW,KAETR,EAAYS,kBAAkB,CAAC,GAAD,OAAI7D,EAAAA,GAAQC,WAAZ,YAA0BZ,KACxDwC,GAAe,IAInB,OACE,iBAAKU,UAAU,gDAAf,WACE,iBAAKA,UAAU,iBAAf,WACE,iBAAMA,UAAU,OAAhB,SAAwBvB,EAAS8C,SAAc,KAAErB,EAAAA,EAAAA,GAAE,gBAGrD,mBACEH,KAAK,SACLC,UAAU,iBACVM,QAASkB,eAAkBT,EAAoBU,cAHjD,UAKIvB,EAAAA,EAAAA,GAAE,uBAXV,ECfIwB,EAA2B,KAC/B,MAAM,YAACrF,GAAeG,KACfmF,EAAYC,IAAiB1F,EAAAA,EAAAA,UAAiB,IAK/C2F,GAAsBC,EAAAA,EAAAA,IAAYH,EAAY,KAYpD,OAVAxE,EAAAA,EAAAA,YACE,UAC8BuD,IAAxBmB,QAAoDnB,IAAfiB,GACvCtF,EAAY,CAAC0F,OAAQF,KAAwBpB,EAAAA,IAC9C,GAEH,CAACoB,KAKD,gBAAK7B,UAAU,aAAf,UAEE,iBAAKA,UAAU,mDAAf,WACE,SAAC,KAAD,CACEC,KAAK,0CACLD,UAAU,uCAEZ,kBACED,KAAK,OACL,4BAA0B,SAC1BC,UAAU,gDACVgC,aAAa9B,EAAAA,EAAAA,GAAE,eACf9D,MAAOuF,EACPxB,SAAWC,GAAMwB,EAAcxB,EAAEC,OAAOjE,aAdhD,ECpBI6F,EAAkB,KACtB,MAAM,SAACxD,GAAYc,IACnB,OACE,iBAAKS,UAAU,4BAAf,WACE,SAAC0B,EAAD,KAEA,gBAAK1B,UAAU,eAAf,SAEGvB,EAAS8C,OAAS,GAAI,SAACX,EAAD,KAAwB,SAACD,EAAD,QANrD,E,cCCF,MAAMuB,EAAgC,QAAC,OAACC,GAAF,SACpC,8BACGA,EAAOC,QAAmC,kBAAlBD,EAAOC,QAC9B,kBAAQD,EAAOE,iBAAf,SAAkCF,EAAOG,OAAO,YAEhDH,EAAOG,OAAO,WALkB,E,cCCtC,MAAMC,EAAuB,QAAC,IAACC,GAAF,SAC3B,kBAAQA,EAAIC,cAAZ,SACGD,EAAIE,MAAMvB,KAAKwB,IAEZ,kBACMA,EAAKC,eACT5C,WAAW6C,EAAAA,EAAAA,GAAK,CAAC,uBAA2C,YAAnBF,EAAKR,OAAOjD,KAFvD,SAIGyD,EAAKL,OAAO,aARM,ECCvBQ,EAA0B,kBAAC,KAACC,GAAF,SAC9B,iBAAK/C,UAAU,4BAAf,WAEE,gBAAKA,UAAU,wDAAf,UACE,cAAGgD,KAAK,IAAR,SACGD,EAAKE,QACJ,gBAAKjD,UAAU,eAAf,UACE,gBAAKkD,KAAKC,EAAAA,EAAAA,IAAc,UAAD,OAAWJ,EAAKE,SAAWG,IAAKL,EAAKM,KAAMrD,UAAU,aAG9E,gBACEA,WAAW6C,EAAAA,EAAAA,GACT,oBADa,6BAEDE,EAAKO,gBAFJ,aAED,EAAetH,OAFd,yBAGL+G,EAAKO,gBAHA,aAGL,EAAetH,QAJ3B,mBAOG+G,EAAKO,gBAPR,aAOG,EAAeC,aAKxB,iBAAKvD,UAAU,qBAAf,WACE,cAAGgD,KAAK,IAAIhD,UAAU,wCAAtB,SACG+C,EAAKM,QAER,0BAAON,EAAKS,aA1Bc,ECJ1BC,EAA+B,QAAC,WAACjD,GAAF,SACnC,gBAAKR,UAAU,8BAAf,SAA8CQ,GADX,ECA/BkD,EAA8B,QAAC,UAACC,GAAF,SAClC,gCAAE,IAAEA,IAAa,gBAAK3D,UAAU,sCAAf,SAAqD,cADpC,ECO9B4D,EAA6B,IAAW,IAAV,GAAC1E,GAAQ,EAC3C,MAAM,mBAACN,GAAsBW,KACvB,MAACzC,GAASqB,IACV0C,GAAcC,EAAAA,EAAAA,mBAEpB3D,EAAAA,EAAAA,YAAU,KACR0C,EAAAA,GAAcC,kBAAd,GACC,IAEH,MAIM+D,GAAa7C,EAAAA,EAAAA,cAAY,KAAM8C,OdSnBC,EcT8B7E,EdUzCvB,IAAAA,OAAA,UAAgBlC,EAAhB,YAA4BsI,IAAUnG,MAAK,SADhCmG,KcTY,GAAuB,CAEnD1C,UAAW,KAETR,EAAYS,kBAAkB,CAAC,GAAD,OAAI7D,EAAAA,GAAQC,WAAZ,YAA0BZ,IAAxD,IAIJ,OACE,iCACE,eACEkG,KAAK,IACLhD,UAAU,gDACV,uBAAqB,QACrB,yBAAuB,aAJzB,UAKC,WAEC,SAAC,KAAD,CAAOC,KAAK,yCAAyCD,UAAU,uBAGjE,iBACEA,UAAU,+HACV,eAAa,OAFf,WAKE,gBAAKA,UAAU,iBAAf,UACE,cAAGA,UAAU,iBAAiBM,QA9BhB,KACpB1B,EAAmBM,EAAnB,EA6BM,SAAsD,YAOxD,gBAAKc,UAAU,iBAAf,UACE,cACEA,UAAU,iBACV,6BAA2B,aAC3BM,QAASkB,eAAkBqC,EAAWpC,cAHxC,SAIC,kBA9BT,EC1BIuC,EAA+B,IAAW,IAAV,GAAC9E,GAAQ,EAC7C,MAAM,SAACT,EAAD,SAAWQ,GAAYM,IACvB0E,GAAa/G,EAAAA,EAAAA,UAAQ,IAAMuB,EAASyF,SAAShF,IAAK,CAACA,EAAIT,IAC7D,OACE,gBAAKuB,UAAU,8DAAf,UACE,kBACEA,UAAU,mBACVD,KAAK,WACL,gBAAekE,EACf,uBAAqB,oCACrBE,QAASF,EACT9D,SAAU,IAAMlB,EAASC,MAR/B,ECCIkF,EAA8B,IAAqC,IAApC,UAACpE,EAAD,MAAYqE,EAAZ,WAAmBC,GAAgB,EACtE,MAAMpF,EAAKoF,EAAWnC,OAAOjD,IACvB,MAAClD,EAAD,YAAQK,GAAeG,IAEvB+H,GAAuBrH,EAAAA,EAAAA,UAAQ,IAC5BlB,EAAMwI,MAAQxI,EAAMwI,OAAStF,GACnC,CAAClD,EAAOkD,IACLuF,GAAoCvH,EAAAA,EAAAA,UAAQ,IAAMlB,EAAMyI,OAAO,CAACzI,IA0BtE,OACE,kBACMsI,EAAWnC,OAAOE,iBACtBrC,WAAW6C,EAAAA,EAAAA,GACT7C,EACAuE,QAAkC7D,IAAV+D,GAAxB,qBAA6DA,IAE/DC,MAAO,CAACC,OAAQ,WAChBrE,QAhCe,KAEjB,GAAW,YAAPpB,GAA2B,cAAPA,EAIxB,GAAKqF,GAML,GAAIA,QAAkC7D,IAAV+D,EAAqB,CAC/C,GAAc,QAAVA,EAGF,YADApI,EAAY,CAACmI,KAAMtF,EAAIuF,MAAO,UAAWhE,EAAAA,KAK3CpE,EAAY,CAACmI,UAAM9D,EAAW+D,WAAO/D,KAAcD,EAAAA,IACpD,OAbCpE,EAAY,CAACmI,KAAMtF,EAAIuF,MAAO,SAAUhE,EAAAA,IAazC,EAID,SASG4D,GAVL,ECpCIO,EAAiC,IAAmB,IAAlB,WAACN,GAAgB,EACvD,MAAM,cAACvF,EAAD,YAAgBK,GAAeG,IACrC,OACE,kBAAQ+E,EAAWnC,OAAOE,iBAAkBrC,UAAU,cAAtD,UACE,gBAAKA,UAAU,mEAAf,UACE,kBACEA,UAAU,mBACVD,KAAK,WACL,gBAAehB,EACf,uBAAqB,oCACrBoF,QAASpF,EACToB,SAAUf,OATlB,ECAIyF,EAA4C,CAChD,CACEzC,OAAS0C,IAAU,SAACF,EAAD,CAAqBN,WAAYQ,IACpD5F,GAAI,YACJ6F,KAAM,WAAMD,GAAN,SAAkB,SAACd,EAAD,CAAmB9E,GAAI4F,EAAMxH,KAAKwH,EAAMtC,IAAIwC,OAAO9F,IAArE,GAER,CACEkD,OAAS0C,IACP,SAACV,EAAD,CAAkBE,WAAYQ,EAAOT,OAAOnE,EAAAA,EAAAA,GAAE,QAASF,UAAU,gBAEnEd,GAAI,OACJ6F,KAAM,WAAMD,GAAN,SAAkB,SAAChC,EAAD,CAAcC,KAAM+B,EAAMxH,KAAKwH,EAAMtC,IAAIwC,QAA3D,GAER,CACE5C,OAAS0C,IACP,SAACV,EAAD,CAAkBE,WAAYQ,EAAOT,OAAOnE,EAAAA,EAAAA,GAAE,QAASF,UAAU,gBAEnEiF,SAAU,QAEZ,CACE7C,OAAS0C,IACP,SAACV,EAAD,CAAkBE,WAAYQ,EAAOT,OAAOnE,EAAAA,EAAAA,GAAE,cAAeF,UAAU,gBAEzEd,GAAI,aACJ6F,KAAM,WAAMD,GAAN,SAAkB,SAACrB,EAAD,CAAmBjD,WAAYsE,EAAMxH,KAAKwH,EAAMtC,IAAIwC,OAAOxE,YAA7E,GAER,CACE4B,OAAS0C,IACP,SAACV,EAAD,CAAkBE,WAAYQ,EAAOT,OAAOnE,EAAAA,EAAAA,GAAE,aAAcF,UAAU,gBAExEd,GAAI,YACJ6F,KAAM,WAAMD,GAAN,SAAkB,SAACpB,EAAD,CAAkBC,UAAWmB,EAAMxH,KAAKwH,EAAMtC,IAAIwC,OAAOrB,WAA3E,GAER,CACEvB,OAAS0C,IACP,SAACV,EAAD,CAAkBE,WAAYQ,EAAOT,OAAOnE,EAAAA,EAAAA,GAAE,cAAeF,UAAU,gBAEzEiF,SAAU,cAEZ,CACE7C,OAAS0C,IACP,SAACV,EAAD,CAAkBE,WAAYQ,EAAOT,OAAOnE,EAAAA,EAAAA,GAAE,WAAYF,UAAU,yBAEtEd,GAAI,UACJ6F,KAAM,WAAMD,GAAN,SAAkB,SAAClB,EAAD,CAAiB1E,GAAI4F,EAAMxH,KAAKwH,EAAMtC,IAAIwC,OAAO9F,IAAnE,ICrDJgG,EAAmB,KAchB,gBAAKR,MAAO,CAZjBS,aAAc,WACdC,UAAW,kCACXC,gBAAiB,OACjBC,MAAO,UACPC,WAAY,MACZC,OAAQ,IACRC,MAAO,OACPC,QAAS,YACTC,IAAK,mBACLC,KAAM,mBAGuBC,SAAU,WAAYC,UAAW,UAAzD,UAAqE5F,EAAAA,EAAAA,GAAE,mBCZ1E6F,EAAsB,KAAO,IAAD,EAChC,MAAMC,ElBoD2B,MACjC,MAAMC,EAA0C,CAC9CC,MAAO,MACJzF,EAAAA,KAGC,SAAClD,GAAYY,IACnB,OAAKZ,GAAaA,EAAS4I,SAAY5I,EAAS4I,QAAQH,WAIjDzI,EAAS4I,QAAQH,WAHfC,CAGT,EkB/DmBG,GACblI,EAAYG,KACZ,YAAChC,GAAeG,IAStB,OACE,iBAAKwD,UAAU,MAAf,WACE,gBAAKA,UAAU,kGACf,gBAAKA,UAAU,6FAAf,UACE,gBAAKd,GAAG,0BAAR,UACE,eAAIc,UAAU,aAAd,mBACGgG,EAAWE,aADd,aACG,EAAkB/E,KAAKkF,IACtB,eAEErG,WAAW6C,EAAAA,EAAAA,GAAK,YAAa,CAC3ByD,OAAQN,EAAWO,OAASF,EAAKE,KACjC1H,SAAUX,EACVsI,SAAyB,qBAAfH,EAAK9C,MACfkD,KAAqB,iBAAfJ,EAAK9C,QANf,UASE,cACEvD,UAAU,YACVM,QAAS,KA1BLiG,SA0BsBF,EAAKE,QAzBhCrI,GAAa8H,EAAWO,OAASA,GAI9ClK,EAAY,CAACkK,OAAMG,eAAgBV,EAAWU,gBAAkB,IAmBpD,EAGEC,wBAAyB,CAACC,OAAQP,EAAK9C,OACvCmB,MAAO,CAACC,OAAQ,cAZb0B,EAAK9C,iBARxB,ECJIsD,EAAa,KACjB,MAAMC,EAAQ1I,IACRF,EAAYG,IACZf,GAAOJ,EAAAA,EAAAA,UAAQ,IAAM4J,GAAO,CAACA,IAC7BC,GAAU7J,EAAAA,EAAAA,UAAQ,IAAM2H,GAAc,KACtC,cAACmC,EAAD,kBAAgBC,EAAhB,QAAmCC,EAAnC,KAA4CC,EAA5C,WAAkDC,IAAcC,EAAAA,EAAAA,UAAS,CAC7EN,UACAzJ,SAGF,OACE,UAAC,KAAD,CAAY0C,UAAU,OAAtB,WACE,gBAAKA,UAAU,mBAAf,UACE,mBACEd,GAAG,iBACHc,UAAU,uEACNgH,IAHN,WAKE,4BACE,eAAIhH,UAAU,2DAAd,SACGkH,EAAQ/F,KAAKgB,IACZ,SAACD,EAAD,CAAoCC,OAAQA,GAAnBA,EAAOjD,WAItC,kBAAOc,UAAU,2BAA4BiH,IAA7C,SACGE,EAAK5F,OAAS,EACb4F,EAAKhG,KAAI,CAACqB,EAAgB8E,KACxBF,EAAW5E,IACJ,SAACD,EAAD,CAAWC,IAAKA,GAAhB,cAAiC8E,EAAjC,YAAsC9E,EAAItD,SAGnD,yBACE,eAAIqI,QAAS,EAAb,UACE,gBAAKvH,UAAU,uEAAf,UACGE,EAAAA,EAAAA,GAAE,2CAQjB,SAAC6F,EAAD,IACC7H,IAAa,SAACgH,EAAD,MAlClB,ECnBIsC,EAAsB,KAC1B,MAAM,mBAAC5I,GAAsBW,IAE7B,OACE,iBAAKS,UAAU,eAAf,WAEE,eAAIA,UAAU,YAAd,SAA0B,cAI1B,gBACEA,UAAU,8CACV,6BAA2B,QAC3BM,QAAS,IAAM1B,OAAmB8B,GAClCgE,MAAO,CAACC,OAAQ,WAJlB,UAME,SAAC,KAAD,CAAO1E,KAAK,yCAAyCD,UAAU,mBAbrE,E,wBCcK,MAAMyH,EACH,oBADGA,EAED,eAFCA,EAGL,gBAHKA,EAIL,GAJKA,GAKJ,GCTHC,GAAiBC,EAAAA,KAAaC,MAAM,CACxCpE,MAAOmE,EAAAA,KACJnE,MAAM,sBACNqE,IAAI,EAAG,qBACPC,IAAI,GAAI,sBACRC,SAAS,qBACZ1E,KAAMsE,EAAAA,KACHE,IAAI,EAAG,qBACPC,IAAI,GAAI,sBACRC,SAAS,sBAGRC,GAA+B,IAA4B,IAA3B,KAACjF,EAAD,cAAOkF,GAAmB,EAC9D,MAAM,mBAACrJ,GAAsBW,KACvB,QAAClC,GAAWc,KAEX+J,IAAehM,EAAAA,EAAAA,UAAe,IAChC6G,EACHE,OAAQF,EAAKE,QAAUwE,EACvBhI,KAAMsD,EAAKtD,MAAQgI,EACnB5B,SAAU9C,EAAK8C,UAAY4B,EAC3BpE,KAAMN,EAAKM,MAAQoE,EACnBjE,MAAOT,EAAKS,OAASiE,KAGjBU,EAAUC,IACVA,GACF/K,IAEFuB,OAAmB8B,EAAnB,EAGI2H,GAAWlF,EAAAA,EAAAA,IAAc,gCACzBmF,GAAgBnF,EAAAA,EAAAA,IAAc,UAAD,OAAW+E,EAAYjF,SAEpDsF,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAeP,EACfQ,iBAAkBhB,GAClBiB,SAAUnH,MAAOoH,EAAP,KAAoC,IAArB,cAACC,GAAmB,EAC3CA,GAAc,GACd,KACMC,EAAAA,EAAAA,IAAWF,EAAO1J,SxB7BV6D,IACXpF,IAAAA,KAAA,UACIlC,EADJ,YACgBsH,EAAK7D,IAAM6D,GAC/BnF,MAAML,GAA4CA,EAASD,OAC3DM,MAAML,GAA6BA,EAASD,OwB0BjCyL,CAAWH,QxBrCP7F,IACXpF,IAAAA,IACAlC,EAAUsH,GACdnF,MAAML,GAA4CA,EAASD,OAC3DM,MAAML,GAA6BA,EAASD,OwBmCjC0L,CAAWJ,EAEpB,CAAC,MAAOK,GACPC,QAAQC,MAAMF,EACf,CARD,QASEJ,GAAc,GACdV,GAAO,EACR,KAIL,OACE,iCACE,kBAAMjJ,GAAG,yBAAyBc,UAAU,OAAO2I,SAAUJ,EAAOa,aAAcC,YAAU,EAA5F,WAEE,iBACErJ,UAAU,yCACVd,GAAG,2BACH,iBAAe,OACf,0BAAwB,6BACxB,4BAA0B,OAC1B,8BAA4B,4BAC5B,0BAAwB,4BACxB,wBAAsB,QARxB,WAWE,iBAAKc,UAAU,cAAf,WAEE,kBAAOA,UAAU,4BAAjB,SAA6C,YAI7C,gBACEA,UAAU,kCACV,sBAAoB,OACpB0E,MAAO,CAAC4E,gBAAgB,QAAD,OAAUjB,EAAV,OAHzB,UAME,gBACErI,UAAU,sCACV0E,MAAO,CAAC4E,gBAAgB,QAAD,OAAUhB,EAAV,eAiD7B,iBAAKtI,UAAU,cAAf,WAEE,kBAAOA,UAAU,6BAAjB,SAA8C,eAI9C,kBACEgC,YAAY,eACRuG,EAAOgB,cAAc,QACzBxJ,KAAK,OACLsD,KAAK,OACLrD,WAAW6C,EAAAA,EAAAA,GACT,+CACA,CAAC,aAAc0F,EAAOiB,QAAQnG,MAAQkF,EAAOkB,OAAOpG,MACpD,CACE,WAAYkF,EAAOiB,QAAQnG,OAASkF,EAAOkB,OAAOpG,OAGtDqG,aAAa,MACb7K,SAAU0J,EAAOoB,cAAgB1B,IAElCM,EAAOiB,QAAQnG,MAAQkF,EAAOkB,OAAOpG,OACpC,gBAAKrD,UAAU,+BAAf,UACE,gBAAKA,UAAU,gBAAf,UACE,iBAAMP,KAAK,QAAX,SAAoB8I,EAAOkB,OAAOpG,eAS1C,iBAAKrD,UAAU,cAAf,WAEE,kBAAOA,UAAU,6BAAjB,SAA8C,WAI9C,kBACEgC,YAAY,WACRuG,EAAOgB,cAAc,SACzBvJ,WAAW6C,EAAAA,EAAAA,GACT,+CACA,CAAC,aAAc0F,EAAOiB,QAAQhG,OAAS+E,EAAOkB,OAAOjG,OACrD,CACE,WAAY+E,EAAOiB,QAAQhG,QAAU+E,EAAOkB,OAAOjG,QAGvDzD,KAAK,QACLsD,KAAK,QACLqG,aAAa,MACb7K,SAAU0J,EAAOoB,cAAgB1B,IAGlCM,EAAOiB,QAAQhG,OAAS+E,EAAOkB,OAAOjG,QACrC,gBAAKxD,UAAU,+BAAf,UACE,iBAAMP,KAAK,QAAX,SAAoB8I,EAAOkB,OAAOjG,cAOxC,iBAAKxD,UAAU,OAAf,WAEE,kBAAOA,UAAU,6BAAjB,SAA8C,UAI9C,gBAAKA,UAAU,gBAAf,UAEE,iBAAKA,UAAU,gDAAf,WAEE,kBACEA,UAAU,2BACNuI,EAAOgB,cAAc,QACzBlG,KAAK,OACLtD,KAAK,QACL3D,MAAM,gBACN8C,GAAG,gCACHiF,QAAgC,kBAAvBoE,EAAOK,OAAOnJ,KACvBZ,SAAU0J,EAAOoB,cAAgB1B,KAKnC,mBAAOjI,UAAU,mBAAmB4J,QAAQ,gCAA5C,WACE,gBAAK5J,UAAU,0BAAf,SAAyC,mBACzC,gBAAKA,UAAU,gBAAf,SAA+B,iEASrC,gBAAKA,UAAU,qCAEf,gBAAKA,UAAU,gBAAf,UAEE,iBAAKA,UAAU,gDAAf,WAEE,kBACEA,UAAU,2BACNuI,EAAOgB,cAAc,QACzBlG,KAAK,OACLtD,KAAK,QACL3D,MAAM,YACN8C,GAAG,gCACHiF,QAAgC,cAAvBoE,EAAOK,OAAOnJ,KACvBZ,SAAU0J,EAAOoB,cAAgB1B,KAInC,mBAAOjI,UAAU,mBAAmB4J,QAAQ,gCAA5C,WACE,gBAAK5J,UAAU,0BAAf,SAAyC,eACzC,gBAAKA,UAAU,gBAAf,SAA+B,mEASrC,gBAAKA,UAAU,qCAEf,gBAAKA,UAAU,gBAAf,UAEE,iBAAKA,UAAU,gDAAf,WAEE,kBACEA,UAAU,2BACNuI,EAAOgB,cAAc,QACzBlG,KAAK,OACLtD,KAAK,QACL3D,MAAM,UACN8C,GAAG,gCACHiF,QAAgC,YAAvBoE,EAAOK,OAAOnJ,KACvBZ,SAAU0J,EAAOoB,cAAgB1B,KAKnC,mBAAOjI,UAAU,mBAAmB4J,QAAQ,gCAA5C,WACE,gBAAK5J,UAAU,0BAAf,SAAyC,aACzC,gBAAKA,UAAU,gBAAf,SAA+B,gHAUrC,gBAAKA,UAAU,qCAEf,gBAAKA,UAAU,gBAAf,UAEE,iBAAKA,UAAU,gDAAf,WAEE,kBACEA,UAAU,2BACNuI,EAAOgB,cAAc,QACzBlG,KAAK,OACLtD,KAAK,QACL3D,MAAM,UACN8C,GAAG,gCACHiF,QAAgC,YAAvBoE,EAAOK,OAAOnJ,KACvBZ,SAAU0J,EAAOoB,cAAgB1B,KAInC,mBAAOjI,UAAU,mBAAmB4J,QAAQ,gCAA5C,WACE,gBAAK5J,UAAU,0BAAf,SAAyC,aACzC,gBAAKA,UAAU,gBAAf,SAA+B,sFASrC,gBAAKA,UAAU,qCAEf,gBAAKA,UAAU,gBAAf,UAEE,iBAAKA,UAAU,gDAAf,WAEE,kBACEA,UAAU,2BACNuI,EAAOgB,cAAc,QACzBlG,KAAK,OACLtD,KAAK,QACLb,GAAG,gCACH9C,MAAM,QACN+H,QAAgC,UAAvBoE,EAAOK,OAAOnJ,KACvBZ,SAAU0J,EAAOoB,cAAgB1B,KAInC,mBAAOjI,UAAU,mBAAmB4J,QAAQ,gCAA5C,WACE,gBAAK5J,UAAU,0BAAf,SAAyC,WACzC,gBAAKA,UAAU,gBAAf,SAA+B,wGAiBzC,iBAAKA,UAAU,oBAAf,WACE,mBACED,KAAK,QACLO,QAAS,IAAM6H,IACfnI,UAAU,qBACV,6BAA2B,SAC3BnB,SAAU0J,EAAOoB,cAAgB1B,EALnC,SAMC,aAID,oBACElI,KAAK,SACLC,UAAU,kBACV,6BAA2B,SAC3BnB,SAAUoJ,GAAiBM,EAAOoB,eAAiBpB,EAAOsB,UAAYtB,EAAOiB,QAJ/E,WAME,iBAAMxJ,UAAU,kBAAhB,SAAkC,YAChCuI,EAAOoB,cAAgB1B,KACvB,kBAAMjI,UAAU,qBAAhB,UAAqC,iBACpB,KACf,iBAAMA,UAAU,oEAOxBuI,EAAOoB,cAAgB1B,KAAkB,SAAC/C,EAAD,MA1U/C,ECjEI4E,GAA2B,KAC/B,MAAM,gBAACnL,EAAD,mBAAkBC,GAAsBW,IACxCwK,GAAwBjB,EAAAA,EAAAA,IAAWnK,IACnC,UACJT,EACAZ,KAAMyF,EAFF,MAGJoG,IACE3L,EAAAA,EAAAA,UAAS,GAAD,OACPC,EAAAA,GAAQC,WADD,iBACoBiB,IAC9B,KACE,OzBFeO,EyBEIP,EzBDhBhB,IAAAA,IAAA,UACGlC,EADH,YACeyD,IACnBtB,MAAML,GAA4CA,EAASD,OAC3DM,MAAML,GAA6BA,EAASD,OAJ5B4B,KyBEf,GAEF,CACEnB,UAAW,EACXiM,QAASD,EACTE,QAAUC,IACRtL,OAAmB8B,GACnBwI,QAAQC,MAAMe,EAAd,IAKN,OAAKvL,EAIAT,GAAciL,IAASpG,EAIrB,MAHE,SAACiF,GAAD,CAAmBC,cAAe/J,EAAW6E,KAAMA,KAJnD,SAACiF,GAAD,CAAmBC,cAAe/J,EAAW6E,KAAM,CAAC7D,QAAIwB,IAOjE,EChCIyJ,GAAgB,MACpBhN,EAAAA,EAAAA,YAAU,KACRiN,SAASC,KAAKC,UAAUC,IAAI,cACrB,KACLH,SAASC,KAAKC,UAAUE,OAAO,aAA/B,IAED,KAGD,iCACE,gBACExK,UAAU,0BACVd,GAAG,oBACHO,KAAK,SACLgL,UAAW,EACX,aAAW,OALb,UAQE,gBAAKzK,UAAU,8CAAf,UAEE,iBAAKA,UAAU,gBAAf,WACE,SAACwH,EAAD,KAEA,gBAAKxH,UAAU,yCAAf,UACE,SAAC8J,GAAD,cASR,gBAAK9J,UAAU,iCC7Bf0K,GAAY,KAChB,MAAM,gBAAC/L,GAAmBY,IAC1B,OACE,iCACE,UAAC,KAAD,YACE,SAAC0C,EAAD,KACA,SAAC4E,EAAD,YAEmBnG,IAApB/B,IAAiC,SAACwL,GAAD,MANtC,EAWIQ,GAAmB,KACvB,SAAC7O,EAAD,WACE,SAACe,EAAD,WACE,SAAC2B,EAAD,WACE,SAACkM,GAAD,UCpBFE,GAAoC,CACxC,CACEvG,MAAO,kBACPpE,KAAM,8BACN4K,aAAa,EACbC,UAAU,GAEZ,CACEzG,MAAO,GACPpE,KAAM,GACN4K,aAAa,EACbC,UAAU,IAuBd,GAnBkB,KAEd,UAAC,KAAD,YACE,SAAC,KAAD,CAAOC,SAAS,SAAC,KAAD,IAAhB,UACE,SAAC,KAAD,CACE9K,KAAK,QACL8K,SACE,iCACE,SAAC,KAAD,CAAWC,YAAaJ,GAAxB,UAA2C1K,EAAAA,EAAAA,GAAE,iBAC7C,SAACyK,GAAD,YAKR,SAAC,KAAD,CAAO3F,OAAK,EAAC+F,SAAS,SAAC,KAAD,CAAUE,GAAG,oC","sources":["app/modules/apps/user-management/users-list/core/_requests.ts","app/modules/apps/user-management/users-list/core/QueryRequestProvider.tsx","app/modules/apps/user-management/users-list/core/QueryResponseProvider.tsx","app/modules/apps/user-management/users-list/core/ListViewProvider.tsx","app/modules/apps/user-management/users-list/components/header/UsersListFilter.tsx","app/modules/apps/user-management/users-list/components/header/UserListToolbar.tsx","app/modules/apps/user-management/users-list/components/header/UsersListGrouping.tsx","app/modules/apps/user-management/users-list/components/header/UsersListSearchComponent.tsx","app/modules/apps/user-management/users-list/components/header/UsersListHeader.tsx","app/modules/apps/user-management/users-list/table/columns/CustomHeaderColumn.tsx","app/modules/apps/user-management/users-list/table/columns/CustomRow.tsx","app/modules/apps/user-management/users-list/table/columns/UserInfoCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserLastLoginCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserTwoStepsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserActionsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserCustomHeader.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionHeader.tsx","app/modules/apps/user-management/users-list/table/columns/_columns.tsx","app/modules/apps/user-management/users-list/components/loading/UsersListLoading.tsx","app/modules/apps/user-management/users-list/components/pagination/UsersListPagination.tsx","app/modules/apps/user-management/users-list/table/UsersTable.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalHeader.tsx","app/modules/apps/user-management/users-list/core/_models.ts","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalForm.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModal.tsx","app/modules/apps/user-management/users-list/UsersList.tsx","app/modules/apps/user-management/UsersPage.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = process.env.REACT_APP_THEME_API_URL\r\nconst USER_URL = `${API_URL}/user`\r\nconst GET_USERS_URL = `${API_URL}/users/query`\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${GET_USERS_URL}?${query}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${USER_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .put(USER_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(`${USER_URL}/${user.id}`, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${USER_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${USER_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, createUser, updateUser}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import {useEffect, useState} from 'react'\r\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\r\nimport {initialQueryState, KTSVG} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport { t } from 'i18next'\r\n\r\nconst UsersListFilter = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const {isLoading} = useQueryResponse()\r\n  const [role, setRole] = useState<string | undefined>()\r\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const resetData = () => {\r\n    updateState({filter: undefined, ...initialQueryState})\r\n  }\r\n\r\n  const filterData = () => {\r\n    updateState({\r\n      filter: {role, last_login: lastLogin},\r\n      ...initialQueryState,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {/* begin::Filter Button */}\r\n    <button\r\n      disabled={isLoading}\r\n      type='button'\r\n      className='btn btn-light-primary me-3'\r\n      data-kt-menu-trigger='click'\r\n      data-kt-menu-placement='bottom-end'\r\n    >\r\n      <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\r\n      {t('Filter')}\r\n    </button>\r\n    {/* end::Filter Button */}\r\n    {/* begin::SubMenu */}\r\n    <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\r\n      {/* begin::Header */}\r\n      <div className='px-7 py-5'>\r\n        <div className='fs-5 text-dark fw-bolder'>{t('Filter Options')}</div>\r\n      </div>\r\n      {/* end::Header */}\r\n  \r\n      {/* begin::Separator */}\r\n      <div className='separator border-gray-200'></div>\r\n      {/* end::Separator */}\r\n  \r\n      {/* begin::Content */}\r\n      <div className='px-7 py-5' data-kt-user-table-filter='form'>\r\n        {/* begin::Input group */}\r\n        <div className='mb-10'>\r\n          <label className='form-label fs-6 fw-bold'>{t('Role')}:</label>\r\n          <select\r\n            className='form-select form-select-solid fw-bolder'\r\n            data-kt-select2='true'\r\n            data-placeholder={t('Select option')}\r\n            data-allow-clear='true'\r\n            data-kt-user-table-filter='role'\r\n            data-hide-search='true'\r\n            onChange={(e) => setRole(e.target.value)}\r\n            value={role}\r\n          >\r\n            <option value=''></option>\r\n            <option value='Administrator'>{t('Administrator')}</option>\r\n            <option value='Analyst'>{t('Analyst')}</option>\r\n            <option value='Developer'>{t('Developer')}</option>\r\n            <option value='Support'>{t('Support')}</option>\r\n            <option value='Trial'>{t('Trial')}</option>\r\n          </select>\r\n        </div>\r\n        {/* end::Input group */}\r\n  \r\n        {/* begin::Input group */}\r\n        <div className='mb-10'>\r\n          <label className='form-label fs-6 fw-bold'>{t('Last login')}:</label>\r\n          <select\r\n            className='form-select form-select-solid fw-bolder'\r\n            data-kt-select2='true'\r\n            data-placeholder={t('Select option')}\r\n            data-allow-clear='true'\r\n            data-kt-user-table-filter='two-step'\r\n            data-hide-search='true'\r\n            onChange={(e) => setLastLogin(e.target.value)}\r\n            value={lastLogin}\r\n          >\r\n            <option value=''></option>\r\n            <option value='Yesterday'>{t('Yesterday')}</option>\r\n            <option value='20 mins ago'>{t('20 mins ago')}</option>\r\n            <option value='5 hours ago'>{t('5 hours ago')}</option>\r\n            <option value='2 days ago'>{t('2 days ago')}</option>\r\n          </select>\r\n        </div>\r\n        {/* end::Input group */}\r\n  \r\n        {/* begin::Actions */}\r\n        <div className='d-flex justify-content-end'>\r\n          <button\r\n            type='button'\r\n            disabled={isLoading}\r\n            onClick={filterData}\r\n            className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\r\n            data-kt-menu-dismiss='true'\r\n            data-kt-user-table-filter='reset'\r\n          >\r\n            {t('Reset')}\r\n          </button>\r\n          <button\r\n            disabled={isLoading}\r\n            type='button'\r\n            onClick={resetData}\r\n            className='btn btn-primary fw-bold px-6'\r\n            data-kt-menu-dismiss='true'\r\n            data-kt-user-table-filter='filter'\r\n          >\r\n            {t('Apply')}\r\n          </button>\r\n        </div>\r\n        {/* end::Actions */}\r\n      </div>\r\n      {/* end::Content */}\r\n    </div>\r\n    {/* end::SubMenu */}\r\n  </>\r\n  \r\n  )\r\n}\r\n\r\nexport {UsersListFilter}\r\n","import { t } from 'i18next'\r\nimport {KTSVG} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      {/* begin::Export */}\r\n      <button type='button' className='btn btn-light-primary me-3'>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\r\n        {t('Export')}\r\n      </button>\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        {t('Add User')}\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\nimport { t } from 'i18next'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> {t('selected')}\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n         {t('Delete Selected')}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport { t } from 'i18next'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder={t('Search user')}\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => (\r\n  <div className='d-flex align-items-center'>\r\n    {/* begin:: Avatar */}\r\n    <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n      <a href='#'>\r\n        {user.avatar ? (\r\n          <div className='symbol-label'>\r\n            <img src={toAbsoluteUrl(`/media/${user.avatar}`)} alt={user.name} className='w-100' />\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className={clsx(\r\n              'symbol-label fs-3',\r\n              `bg-light-${user.initials?.state}`,\r\n              `text-${user.initials?.state}`\r\n            )}\r\n          >\r\n            {user.initials?.label}\r\n          </div>\r\n        )}\r\n      </a>\r\n    </div>\r\n    <div className='d-flex flex-column'>\r\n      <a href='#' className='text-gray-800 text-hover-primary mb-1'>\r\n        {user.name}\r\n      </a>\r\n      <span>{user.email}</span>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  last_login?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({last_login}) => (\r\n  <div className='badge badge-light fw-bolder'>{last_login}</div>\r\n)\r\n\r\nexport {UserLastLoginCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  two_steps?: boolean\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({two_steps}) => (\r\n  <> {two_steps && <div className='badge badge-light-success fw-bolder'>Enabled</div>}</>\r\n)\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        Actions\r\n        <KTSVG path='/media/icons/duotune/arrows/arr072.svg' className='svg-icon-5 m-0' />\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","import { Column } from 'react-table';\r\nimport { UserInfoCell } from './UserInfoCell';\r\nimport { UserLastLoginCell } from './UserLastLoginCell';\r\nimport { UserTwoStepsCell } from './UserTwoStepsCell';\r\nimport { UserActionsCell } from './UserActionsCell';\r\nimport { UserSelectionCell } from './UserSelectionCell';\r\nimport { UserCustomHeader } from './UserCustomHeader';\r\nimport { UserSelectionHeader } from './UserSelectionHeader';\r\nimport { User } from '../../core/_models';\r\nimport { t } from 'i18next';\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({ ...props }) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title={t('Name')} className='min-w-125px' />\r\n    ),\r\n    id: 'name',\r\n    Cell: ({ ...props }) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title={t('Role')} className='min-w-125px' />\r\n    ),\r\n    accessor: 'role',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title={t('Last login')} className='min-w-125px' />\r\n    ),\r\n    id: 'last_login',\r\n    Cell: ({ ...props }) => <UserLastLoginCell last_login={props.data[props.row.index].last_login} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title={t('Two steps')} className='min-w-125px' />\r\n    ),\r\n    id: 'two_steps',\r\n    Cell: ({ ...props }) => <UserTwoStepsCell two_steps={props.data[props.row.index].two_steps} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title={t('Joined day')} className='min-w-125px' />\r\n    ),\r\n    accessor: 'joined_day',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title={t('Actions')} className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({ ...props }) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n];\r\n\r\nexport { usersColumns };\r\n","import { t } from \"i18next\"\r\n\r\nconst UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>{t('Processing...')}</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from '../table/columns/CustomHeaderColumn'\r\nimport {CustomRow} from '../table/columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../../_metronic/helpers'\r\nimport { t } from 'i18next'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    {t('No matching records found')}\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add User</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../../_metronic/helpers'\r\nexport type User = {\r\n  id?: ID\r\n  name?: string\r\n  avatar?: string\r\n  email?: string\r\n  position?: string\r\n  role?: string\r\n  last_login?: string\r\n  two_steps?: boolean\r\n  joined_day?: string\r\n  online?: boolean\r\n  initials?: {\r\n    label: string\r\n    state: string\r\n  }\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nexport const initialUser: User = {\r\n  avatar: 'avatars/300-6.jpg',\r\n  position: 'Art Director',\r\n  role: 'Administrator',\r\n  name: '',\r\n  email: '',\r\n}\r\n","import {FC, useState} from 'react'\r\nimport * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport {isNotEmpty, toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {initialUser, User} from '../core/_models'\r\nimport clsx from 'clsx'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser, updateUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  user: User\r\n}\r\n\r\nconst editUserSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email('Wrong email format')\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Email is required'),\r\n  name: Yup.string()\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Name is required'),\r\n})\r\n\r\nconst UserEditModalForm: FC<Props> = ({user, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n\r\n  const [userForEdit] = useState<User>({\r\n    ...user,\r\n    avatar: user.avatar || initialUser.avatar,\r\n    role: user.role || initialUser.role,\r\n    position: user.position || initialUser.position,\r\n    name: user.name || initialUser.name,\r\n    email: user.email || initialUser.email,\r\n  })\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const blankImg = toAbsoluteUrl('/media/svg/avatars/blank.svg')\r\n  const userAvatarImg = toAbsoluteUrl(`/media/${userForEdit.avatar}`)\r\n\r\n  const formik = useFormik({\r\n    initialValues: userForEdit,\r\n    validationSchema: editUserSchema,\r\n    onSubmit: async (values, {setSubmitting}) => {\r\n      setSubmitting(true)\r\n      try {\r\n        if (isNotEmpty(values.id)) {\r\n          await updateUser(values)\r\n        } else {\r\n          await createUser(values)\r\n        }\r\n      } catch (ex) {\r\n        console.error(ex)\r\n      } finally {\r\n        setSubmitting(true)\r\n        cancel(true)\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <form id='kt_modal_add_user_form' className='form' onSubmit={formik.handleSubmit} noValidate>\r\n        {/* begin::Scroll */}\r\n        <div\r\n          className='d-flex flex-column scroll-y me-n7 pe-7'\r\n          id='kt_modal_add_user_scroll'\r\n          data-kt-scroll='true'\r\n          data-kt-scroll-activate='{default: false, lg: true}'\r\n          data-kt-scroll-max-height='auto'\r\n          data-kt-scroll-dependencies='#kt_modal_add_user_header'\r\n          data-kt-scroll-wrappers='#kt_modal_add_user_scroll'\r\n          data-kt-scroll-offset='300px'\r\n        >\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='d-block fw-bold fs-6 mb-5'>Avatar</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Image input */}\r\n            <div\r\n              className='image-input image-input-outline'\r\n              data-kt-image-input='true'\r\n              style={{backgroundImage: `url('${blankImg}')`}}\r\n            >\r\n              {/* begin::Preview existing avatar */}\r\n              <div\r\n                className='image-input-wrapper w-125px h-125px'\r\n                style={{backgroundImage: `url('${userAvatarImg}')`}}\r\n              ></div>\r\n              {/* end::Preview existing avatar */}\r\n\r\n              {/* begin::Label */}\r\n              {/* <label\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='change'\r\n              data-bs-toggle='tooltip'\r\n              title='Change avatar'\r\n            >\r\n              <i className='bi bi-pencil-fill fs-7'></i>\r\n\r\n              <input type='file' name='avatar' accept='.png, .jpg, .jpeg' />\r\n              <input type='hidden' name='avatar_remove' />\r\n            </label> */}\r\n              {/* end::Label */}\r\n\r\n              {/* begin::Cancel */}\r\n              {/* <span\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='cancel'\r\n              data-bs-toggle='tooltip'\r\n              title='Cancel avatar'\r\n            >\r\n              <i className='bi bi-x fs-2'></i>\r\n            </span> */}\r\n              {/* end::Cancel */}\r\n\r\n              {/* begin::Remove */}\r\n              {/* <span\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='remove'\r\n              data-bs-toggle='tooltip'\r\n              title='Remove avatar'\r\n            >\r\n              <i className='bi bi-x fs-2'></i>\r\n            </span> */}\r\n              {/* end::Remove */}\r\n            </div>\r\n            {/* end::Image input */}\r\n\r\n            {/* begin::Hint */}\r\n            {/* <div className='form-text'>Allowed file types: png, jpg, jpeg.</div> */}\r\n            {/* end::Hint */}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-2'>Full Name</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Input */}\r\n            <input\r\n              placeholder='Full name'\r\n              {...formik.getFieldProps('name')}\r\n              type='text'\r\n              name='name'\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.name && formik.errors.name},\r\n                {\r\n                  'is-valid': formik.touched.name && !formik.errors.name,\r\n                }\r\n              )}\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {formik.touched.name && formik.errors.name && (\r\n              <div className='fv-plugins-message-container'>\r\n                <div className='fv-help-block'>\r\n                  <span role='alert'>{formik.errors.name}</span>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {/* end::Input */}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-2'>Email</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Input */}\r\n            <input\r\n              placeholder='Email'\r\n              {...formik.getFieldProps('email')}\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.email && formik.errors.email},\r\n                {\r\n                  'is-valid': formik.touched.email && !formik.errors.email,\r\n                }\r\n              )}\r\n              type='email'\r\n              name='email'\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {/* end::Input */}\r\n            {formik.touched.email && formik.errors.email && (\r\n              <div className='fv-plugins-message-container'>\r\n                <span role='alert'>{formik.errors.email}</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-5'>Role</label>\r\n            {/* end::Label */}\r\n            {/* begin::Roles */}\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Administrator'\r\n                  id='kt_modal_update_role_option_0'\r\n                  checked={formik.values.role === 'Administrator'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_0'>\r\n                  <div className='fw-bolder text-gray-800'>Administrator</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for business owners and company administrators\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Developer'\r\n                  id='kt_modal_update_role_option_1'\r\n                  checked={formik.values.role === 'Developer'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_1'>\r\n                  <div className='fw-bolder text-gray-800'>Developer</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for developers or people primarily using the API\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Analyst'\r\n                  id='kt_modal_update_role_option_2'\r\n                  checked={formik.values.role === 'Analyst'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_2'>\r\n                  <div className='fw-bolder text-gray-800'>Analyst</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for people who need full access to analytics data, but don't need to update\r\n                    business settings\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Support'\r\n                  id='kt_modal_update_role_option_3'\r\n                  checked={formik.values.role === 'Support'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_3'>\r\n                  <div className='fw-bolder text-gray-800'>Support</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for employees who regularly refund payments and respond to disputes\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  id='kt_modal_update_role_option_4'\r\n                  value='Trial'\r\n                  checked={formik.values.role === 'Trial'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_4'>\r\n                  <div className='fw-bolder text-gray-800'>Trial</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for people who need to preview content data, but don't need to make any\r\n                    updates\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            {/* end::Roles */}\r\n          </div>\r\n          {/* end::Input group */}\r\n        </div>\r\n        {/* end::Scroll */}\r\n\r\n        {/* begin::Actions */}\r\n        <div className='text-center pt-15'>\r\n          <button\r\n            type='reset'\r\n            onClick={() => cancel()}\r\n            className='btn btn-light me-3'\r\n            data-kt-users-modal-action='cancel'\r\n            disabled={formik.isSubmitting || isUserLoading}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type='submit'\r\n            className='btn btn-primary'\r\n            data-kt-users-modal-action='submit'\r\n            disabled={isUserLoading || formik.isSubmitting || !formik.isValid || !formik.touched}\r\n          >\r\n            <span className='indicator-label'>Submit</span>\r\n            {(formik.isSubmitting || isUserLoading) && (\r\n              <span className='indicator-progress'>\r\n                Please wait...{' '}\r\n                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n              </span>\r\n            )}\r\n          </button>\r\n        </div>\r\n        {/* end::Actions */}\r\n      </form>\r\n      {(formik.isSubmitting || isUserLoading) && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {\r\n    isLoading,\r\n    data: user,\r\n    error,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-650px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15 my-7'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst UsersListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <UsersList />\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {UsersListWrapper}\r\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../../_metronic/layout/core'\r\nimport {UsersListWrapper} from './users-list/UsersList'\r\nimport { t } from 'i18next'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'User Management',\r\n    path: '/apps/user-management/users',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst UsersPage = () => {\r\n  return (\r\n    <Routes>\r\n      <Route element={<Outlet />}>\r\n        <Route\r\n          path='users'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>{t('Users list')}</PageTitle>\r\n              <UsersListWrapper />\r\n            </>\r\n          }\r\n        />\r\n      </Route>\r\n      <Route index element={<Navigate to='/apps/user-management/users' />} />\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default UsersPage\r\n"],"names":["API_URL","process","USER_URL","GET_USERS_URL","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","children","state","setState","useState","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","query","setQuery","stringifyRequestQuery","updatedQuery","useMemo","useEffect","isFetching","refetch","data","response","useQuery","QUERIES","USERS_LIST","axios","then","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","id","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","UsersListFilter","role","setRole","lastLogin","setLastLogin","MenuComponent","reinitialization","type","className","path","t","onChange","e","target","onClick","filter","last_login","initialQueryState","undefined","UsersListToolbar","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","length","async","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","search","placeholder","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","user","href","avatar","src","toAbsoluteUrl","alt","name","initials","label","email","UserLastLoginCell","UserTwoStepsCell","two_steps","UserActionsCell","deleteItem","deleteUser","userId","UserSelectionCell","isSelected","includes","checked","UserCustomHeader","title","tableProps","isSelectedForSorting","sort","order","style","cursor","UserSelectionHeader","usersColumns","props","Cell","index","accessor","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","UsersListPagination","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","next","items_per_page","dangerouslySetInnerHTML","__html","UsersTable","users","columns","getTableProps","getTableBodyProps","headers","rows","prepareRow","useTable","i","colSpan","UserEditModalHeader","initialUser","editUserSchema","Yup","shape","min","max","required","UserEditModalForm","isUserLoading","userForEdit","cancel","withRefresh","blankImg","userAvatarImg","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","isNotEmpty","updateUser","createUser","ex","console","error","handleSubmit","noValidate","backgroundImage","getFieldProps","touched","errors","autoComplete","isSubmitting","htmlFor","isValid","UserEditModalFormWrapper","enabledQuery","enabled","onError","err","UserEditModal","document","body","classList","add","remove","tabIndex","UsersList","UsersListWrapper","usersBreadcrumbs","isSeparator","isActive","element","breadcrumbs","to"],"sourceRoot":""}